import os

configfile: "./config/config.yaml"

rule all:
    input:
        plot_aa = "../results_{uniprot}/{uniprot}_plot_aminoacid_pathogenicity_score.png".format(uniprot=config['uniprot']),
        plot_aa_heatmap = "../results_{uniprot}/{uniprot}_plot_aminoacid_heatmap.png".format(uniprot=config['uniprot'])
    params:
        wd = os.getcwd()
    message:
        '''
        This is the AlphaMissense data analysis pipeline.
        '''

rule download_unzip_substitution_data:
    params:
        url = "https://zenodo.org/record/8208688/files/AlphaMissense_aa_substitutions.tsv.gz?download=1"
    output:
        alphamissense_raw_data = "../data/alphamissense_raw_data/AlphaMissense_aa_substitutions.tsv"
    run:
        # Check if the file already exists; if not, download and unzip it
        if not os.path.exists(output.alphamissense_raw_data):
            shell("""
                curl -L -o {output.alphamissense_raw_data}.gz {params.url}
                gunzip -c {output.alphamissense_raw_data}.gz > {output.alphamissense_raw_data}
            """)
        else:
            # File already exists, just unzip it if it's compressed
            if not os.path.exists(output.alphamissense_raw_data + '.gz'):
                raise Exception("Downloaded file is missing, and the compressed file is missing as well.")

            shell("gunzip -c {output.alphamissense_raw_data}.gz > {output.alphamissense_raw_data}")


rule extract_uniprot:
    input:
        alphamissense_raw_data = "../data/alphamissense_raw_data/AlphaMissense_aa_substitutions.tsv"
    params:
        uniprot = config['uniprot'],
    output:
        uniprot_results = "../results_{uniprot}/{uniprot}_specific_aa_substitutions.tsv".format(uniprot=config['uniprot'])
    conda:
        "env/asns_variants.yml"
    shell:
        """
        ./scripts/extract_uniprot.sh {params.uniprot} {input.alphamissense_raw_data} {output.uniprot_results}
        """

rule avg_pathogenicity_score:
    input:
        uniprot_results = "../results_{uniprot}/{uniprot}_specific_aa_substitutions.tsv".format(uniprot=config['uniprot'])
    output:
        avg_path_score = "../results_{uniprot}/{uniprot}_average_pathogenicity_score_aa.tsv".format(uniprot=config['uniprot'])
    conda:
        "env/asns_variants.yml"
    shell:
        """
        python ./scripts/average_pathogenicity_score_aa.py {input.uniprot_results} {output.avg_path_score}
        """

rule plot_avg_path:
    input:
        avg_path_score = "../results_{uniprot}/{uniprot}_average_pathogenicity_score_aa.tsv".format(uniprot=config['uniprot'])
    output:
        plot_aa = "../results_{uniprot}/{uniprot}_plot_aminoacid_pathogenicity_score.png"
    conda:
        "env/asns_variants.yml"
    shell:
        """
        Rscript ./scripts/plot_aminoacid_scores.R {input.avg_path_score} {output.plot_aa}
        """

rule plot_heatmap_path:
    input:
        uniprot_results = "../results_{uniprot}/{uniprot}_specific_aa_substitutions.tsv".format(uniprot=config['uniprot'])
    output:
        plot_aa_heatmap = "../results_{uniprot}/{uniprot}_plot_aminoacid_heatmap.png".format(uniprot=config['uniprot'])
    conda:
        "env/asns_variants.yml"
    shell:
        """
        python ./scripts/plot_aminoacid_heatmap.py {input.uniprot_results} {output.plot_aa_heatmap}
        """

